"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const apollo_server_errors_1 = require("apollo-server-errors");
class RESTDataSource {
    didReceiveErrorResponse(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const message = `${response.status} ${response.statusText}: ${yield response.text()}`;
            if (response.status === 401) {
                throw new apollo_server_errors_1.AuthenticationError(message);
            }
            else if (response.status === 403) {
                throw new apollo_server_errors_1.ForbiddenError(message);
            }
            else {
                throw new apollo_server_errors_1.ApolloError(message);
            }
        });
    }
    get(path, params, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.fetch(path, params, Object.assign({ method: 'GET' }, options));
        });
    }
    post(path, params, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.fetch(path, params, Object.assign({ method: 'POST' }, options));
        });
    }
    patch(path, params, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.fetch(path, params, Object.assign({ method: 'PATCH' }, options));
        });
    }
    put(path, params, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.fetch(path, params, Object.assign({ method: 'PUT' }, options));
        });
    }
    delete(path, params, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.fetch(path, params, Object.assign({ method: 'DELETE' }, options));
        });
    }
    fetch(path, params, init) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = new URL(path, this.baseURL);
            if (params) {
                for (const [name, value] of new URLSearchParams(params)) {
                    url.searchParams.append(name, value);
                }
            }
            return this.trace(`${(init && init.method) || 'GET'} ${url}`, () => __awaiter(this, void 0, void 0, function* () {
                const request = new Request(String(url));
                if (this.willSendRequest) {
                    this.willSendRequest(request);
                }
                const response = yield this.httpCache.fetch(request, init);
                if (response.ok) {
                    const contentType = response.headers.get('Content-Type');
                    if (contentType && contentType.startsWith('application/json')) {
                        return response.json();
                    }
                    else {
                        return response.text();
                    }
                }
                else {
                    return this.didReceiveErrorResponse(response);
                }
            }));
        });
    }
    trace(label, fn) {
        return __awaiter(this, void 0, void 0, function* () {
            if (process && process.env && process.env.NODE_ENV === 'development') {
                const startTime = Date.now();
                try {
                    return yield fn();
                }
                finally {
                    const duration = Date.now() - startTime;
                    console.log(`${label} (${duration}ms)`);
                }
            }
            else {
                return fn();
            }
        });
    }
}
exports.RESTDataSource = RESTDataSource;
//# sourceMappingURL=RESTDataSource.js.map