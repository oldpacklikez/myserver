"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const date_1 = require("./__mocks__/date");
function testKeyValueCache(keyValueCache) {
    describe('KeyValueCache Test Suite', () => {
        beforeAll(() => {
            date_1.mockDate();
            jest.useFakeTimers();
        });
        beforeEach(() => {
            keyValueCache.flush();
        });
        afterAll(() => {
            date_1.unmockDate();
            keyValueCache.close();
        });
        it('can do a basic get and set', () => __awaiter(this, void 0, void 0, function* () {
            yield keyValueCache.set('hello', 'world');
            expect(yield keyValueCache.get('hello')).toBe('world');
            expect(yield keyValueCache.get('missing')).not.toBeDefined();
        }));
        it('is able to expire keys based on ttl', () => __awaiter(this, void 0, void 0, function* () {
            yield keyValueCache.set('short', 's', { ttl: 1 });
            yield keyValueCache.set('long', 'l', { ttl: 5 });
            expect(yield keyValueCache.get('short')).toBe('s');
            expect(yield keyValueCache.get('long')).toBe('l');
            date_1.advanceTimeBy(1500);
            jest.advanceTimersByTime(1500);
            expect(yield keyValueCache.get('short')).not.toBeDefined();
            expect(yield keyValueCache.get('long')).toBe('l');
            date_1.advanceTimeBy(4000);
            jest.advanceTimersByTime(4000);
            expect(yield keyValueCache.get('short')).not.toBeDefined();
            expect(yield keyValueCache.get('long')).not.toBeDefined();
        }));
    });
}
exports.testKeyValueCache = testKeyValueCache;
//# sourceMappingURL=tests.js.map